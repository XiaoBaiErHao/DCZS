package com.example.dczs.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dczs.entity.AddModifyMenuBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADD_MODIFY_MENU_BEAN".
*/
public class AddModifyMenuBeanDao extends AbstractDao<AddModifyMenuBean, Long> {

    public static final String TABLENAME = "ADD_MODIFY_MENU_BEAN";

    /**
     * Properties of entity AddModifyMenuBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GreensId = new Property(0, Long.class, "greensId", true, "_id");
        public final static Property GreensName = new Property(1, String.class, "greensName", false, "GREENS_NAME");
        public final static Property GreensPrice = new Property(2, String.class, "greensPrice", false, "GREENS_PRICE");
        public final static Property GreensSynopsis = new Property(3, String.class, "greensSynopsis", false, "GREENS_SYNOPSIS");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateUserId = new Property(5, String.class, "createUserId", false, "CREATE_USER_ID");
        public final static Property CreateUserName = new Property(6, String.class, "createUserName", false, "CREATE_USER_NAME");
        public final static Property MerchantSites = new Property(7, String.class, "merchantSites", false, "MERCHANT_SITES");
        public final static Property MenuPictures = new Property(8, String.class, "menuPictures", false, "MENU_PICTURES");
        public final static Property Latitude = new Property(9, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(10, Double.class, "longitude", false, "LONGITUDE");
        public final static Property City = new Property(11, String.class, "city", false, "CITY");
    }


    public AddModifyMenuBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AddModifyMenuBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADD_MODIFY_MENU_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: greensId
                "\"GREENS_NAME\" TEXT," + // 1: greensName
                "\"GREENS_PRICE\" TEXT," + // 2: greensPrice
                "\"GREENS_SYNOPSIS\" TEXT," + // 3: greensSynopsis
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"CREATE_USER_ID\" TEXT," + // 5: createUserId
                "\"CREATE_USER_NAME\" TEXT," + // 6: createUserName
                "\"MERCHANT_SITES\" TEXT," + // 7: merchantSites
                "\"MENU_PICTURES\" TEXT," + // 8: menuPictures
                "\"LATITUDE\" REAL," + // 9: latitude
                "\"LONGITUDE\" REAL," + // 10: longitude
                "\"CITY\" TEXT);"); // 11: city
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADD_MODIFY_MENU_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddModifyMenuBean entity) {
        stmt.clearBindings();
 
        Long greensId = entity.getGreensId();
        if (greensId != null) {
            stmt.bindLong(1, greensId);
        }
 
        String greensName = entity.getGreensName();
        if (greensName != null) {
            stmt.bindString(2, greensName);
        }
 
        String greensPrice = entity.getGreensPrice();
        if (greensPrice != null) {
            stmt.bindString(3, greensPrice);
        }
 
        String greensSynopsis = entity.getGreensSynopsis();
        if (greensSynopsis != null) {
            stmt.bindString(4, greensSynopsis);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(6, createUserId);
        }
 
        String createUserName = entity.getCreateUserName();
        if (createUserName != null) {
            stmt.bindString(7, createUserName);
        }
 
        String merchantSites = entity.getMerchantSites();
        if (merchantSites != null) {
            stmt.bindString(8, merchantSites);
        }
 
        String menuPictures = entity.getMenuPictures();
        if (menuPictures != null) {
            stmt.bindString(9, menuPictures);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(10, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(11, longitude);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(12, city);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddModifyMenuBean entity) {
        stmt.clearBindings();
 
        Long greensId = entity.getGreensId();
        if (greensId != null) {
            stmt.bindLong(1, greensId);
        }
 
        String greensName = entity.getGreensName();
        if (greensName != null) {
            stmt.bindString(2, greensName);
        }
 
        String greensPrice = entity.getGreensPrice();
        if (greensPrice != null) {
            stmt.bindString(3, greensPrice);
        }
 
        String greensSynopsis = entity.getGreensSynopsis();
        if (greensSynopsis != null) {
            stmt.bindString(4, greensSynopsis);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(6, createUserId);
        }
 
        String createUserName = entity.getCreateUserName();
        if (createUserName != null) {
            stmt.bindString(7, createUserName);
        }
 
        String merchantSites = entity.getMerchantSites();
        if (merchantSites != null) {
            stmt.bindString(8, merchantSites);
        }
 
        String menuPictures = entity.getMenuPictures();
        if (menuPictures != null) {
            stmt.bindString(9, menuPictures);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(10, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(11, longitude);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(12, city);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddModifyMenuBean readEntity(Cursor cursor, int offset) {
        AddModifyMenuBean entity = new AddModifyMenuBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // greensId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // greensName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // greensPrice
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // greensSynopsis
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createUserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createUserName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // merchantSites
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // menuPictures
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // latitude
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // longitude
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // city
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddModifyMenuBean entity, int offset) {
        entity.setGreensId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGreensName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGreensPrice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGreensSynopsis(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMerchantSites(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMenuPictures(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLatitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLongitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setCity(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddModifyMenuBean entity, long rowId) {
        entity.setGreensId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddModifyMenuBean entity) {
        if(entity != null) {
            return entity.getGreensId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddModifyMenuBean entity) {
        return entity.getGreensId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
